#!/usr/bin/env perl

use Mojolicious::Lite;
use Mojo::IOLoop;
use Mojo::Util qw(b64_decode encode quote);

our $VERSION = '0.006';

sub find_mux {
    my @paths = ( '/run/saslauthd/mux', '/var/state/saslauthd/mux',
        '/var/sasl2/mux' );
    return ( ( grep {-S} @paths ), '/var/run/saslauthd/mux' )[0];
}

my $config = plugin Config => {
    file => $ENV{MOJO_CONFIG} || '/etc/nginx/auth-saslauthd.conf',
    default => {
        path    => find_mux,
        timeout => 10,
        service => 'nginx',
        realm   => '',
    }
};

sub auth_cyrus {
    my ( $login, $pw, $cb ) = @_;

    my $service = $config->{service};
    my $timeout = $config->{timeout};
    my $path    = $config->{path};
    my $realm   = $config->{realm};

    my $cred = pack 'n/a*n/a*n/a*n/a*', $login, $pw,
        encode( 'UTF-8', $service ), encode( 'UTF-8', $realm );

    my $bytes = "";

    Mojo::IOLoop->client(
        { path => $path, timeout => $timeout },
        sub {
            my ( $loop, $err, $stream ) = @_;

            if ($err) {
                $cb->( "$path: $err", 'NO' );
                return;
            }

            $stream->on( read => sub { $bytes .= $_[1] } );

            $stream->on(
                close => sub {
                    my $reply = unpack 'n/a*', $bytes;
                    $cb->( undef, $reply );
                }
            );

            $stream->on(
                error => sub {
                    my ( $stream, $err ) = @_;
                    $cb->( "$path: $err", 'NO' );
                }
            );

            $stream->timeout($timeout);
            $stream->write($cred);
        }
    );
    return;
}

sub authorized {
    my ( $c, $reply ) = @_;

    return $c->render( status => 200, text => $reply, format => 'txt' );
}

sub unauthorized {
    my ( $c, $reply ) = @_;

    my $realm = $c->req->headers->header('X-Realm') // 'Restricted';
    $c->res->headers->www_authenticate(
        'Basic realm=' . quote($realm) . ', charset="UTF-8"' );
    $c->res->headers->cache_control('no-cache');
    return $c->render( status => 401, text => $reply, format => 'txt' );
}

sub error {
    my ( $c, $err ) = @_;

    return $c->render( status => 503, text => $err, format => 'txt' );
}

get '/auth-basic' => sub {
    my $c = shift;

    my $auth = $c->req->headers->authorization // q{};
    if ( substr( $auth, 0, 6 ) eq 'Basic ' ) {
        my $cred = b64_decode( substr $auth, 6 ) // q{};
        my ( $login, $pw ) = split /:/, $cred, 2;
        if ( defined $login && defined $pw ) {
            $c->render_later;
            my $tx = $c->tx;
            auth_cyrus(
                $login, $pw,
                sub {
                    my ( $err, $reply ) = @_;
                    return if $tx->is_finished;
                    return error( $c, $err ) if defined $err;
                    return unauthorized( $c, $reply )
                        if substr( $reply, 0, 2 ) ne 'OK';
                    return authorized( $c, $reply );
                }
            );
            return;
        }
    }

    return unauthorized( $c, 'Unauthorized' );
};

app->hook(
    after_dispatch => sub {
        my $c = shift;
        $c->res->headers->remove('Server');
    }
);

app->start;
__END__

=head1 NAME

nginx-auth-saslauthd - Verify web users with Basic authentication and saslauthd

=head1 VERSION

This documentation refers to nginx-auth-saslauthd version 0.006.

=head1 USAGE

    location /private/ {
        auth_request /auth;
    }

    location = /auth {
        internal;
        proxy_pass http://127.0.0.1:8008/auth-basic;
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
        proxy_set_header X-Realm "Restricted";
    }

=head1 DESCRIPTION

B<nginx-auth-saslauthd> interfaces the B<nginx> web server with the
B<saslauthd> daemon.  The program supports Basic authentication and verifies
users with LDAP, PAM or other mechanisms supported by B<saslauthd>.
Authentication requests are forwarded from B<nginx> with the B<auth_request>
directive.

=head1 CONFIGURATION

=head2 /etc/nginx/auth-saslauthd.conf

Create the file F</etc/nginx/auth-saslauthd.conf> if the default values do not
fit.

    {
        path    => '/var/run/saslauthd/mux',
        timeout => 10,
        service => 'nginx',
        realm   => '',
    };

=over 4

=item path

The path to the communications socket. Defaults to a platform-specific path,
e.g. F</var/run/saslauthd/mux>.

=item timeout

A timeout when writing to and reading from the socket. Defaults to 10 seconds.

=item service

The SASL service name. Defaults to "nginx".

=item realm

The SASL realm. Defaults to the empty string.

=back

=head2 NGINX

Set the B<X-Realm> header in B<nginx> to the realm for Basic authentication.
The realm must only contain ASCII characters.

    proxy_set_header X-Realm "Restricted";

B<nginx> can be configured to cache authentication requests, but the
credentials will be stored in cleartext.

    http {
        ...
        proxy_cache_path /var/cache/nginx/auth_cache keys_zone=auth_cache:1m;

        server {
            ...
            location = /auth {
                ...
                proxy_cache auth_cache
                proxy_cache_key "$http_authorization";
                proxy_cache_valid 200 10m;
            }
        }
    }

=head2 SASLAUTHD

Enable credential caching by passing the B<-c> switch to B<saslauthd>.

On Ubuntu, install the B<sasl2-bin> package. Enable and configure the
authentication daemon in F</etc/default/saslauthd>.

If you use LDAP, create F</etc/saslauthd.conf>.

    ldap_servers: ldap://ad1.example.com ldap://ad2.example.com
    ldap_start_tls: yes
    ldap_tls_cacert_file: /etc/ssl/certs/EXAMPLE-ADS-CA.pem
    ldap_tls_check_peer: yes
    ldap_search_base: OU=Users,DC=EXAMPLE,DC=COM
    ldap_filter: (sAMAccountName=%U)
    ldap_bind_dn: CN=saslauthd,OU=Users,DC=EXAMPLE,DC=COM
    ldap_password: secret

If you use PAM, create F</etc/pam.d/nginx>.

    #%PAM-1.0
    @include common-auth
    @include common-account

Check your setup with B<testsaslauthd>.

    unset HISTFILE
    /usr/sbin/testsaslauthd -s nginx -u $USER -p 'your password'

=head2 SYSTEMD

Create a new user. On Ubuntu, add the user to the B<sasl> group.

    useradd -r -M -d /nonexistent -s /usr/sbin/nologin -G sasl -U nginx-auth

Create F</etc/systemd/system/nginx-auth-saslauthd.service> and enable the
program with B<systemctl>.

    [Unit]
    Description=Basic authentication with saslauthd
    After=network.target

    [Service]
    Type=simple
    User=nginx-auth
    ExecStart=/usr/local/bin/nginx-auth-saslauthd daemon -m production \
              -l http://127.0.0.1:8008

    [Install]
    WantedBy=multi-user.target

Test the program with B<curl>.

    curl -v http://127.0.0.1:8008/auth-basic

=head1 DEPENDENCIES

Requires Mojolicious 7.27 or later and the saslauthd daemon from Cyrus SASL.

=head1 INCOMPATIBILITIES

None known.

=head1 SEE ALSO

Mojolicious, Mojolicious::Guides::Cookbook, saslauthd(8),
L<https://nginx.org/en/docs/http/ngx_http_auth_request_module.html>

=head1 AUTHOR

Andreas Voegele E<lt>voegelas@cpan.orgE<gt>

=head1 BUGS AND LIMITATIONS

Basic authentication doesn't encrypt the credentials. Protect your site with
HTTPS.

Please report any bugs to the author.

=head1 LICENSE AND COPYRIGHT

Copyright 2017-2018 Andreas Voegele

Permission to use, copy, modify, and distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

=cut
